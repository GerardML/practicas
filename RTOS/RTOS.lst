CCS PCM C Compiler, Version 5.015, 5967               30-mar.-21 15:35

               Filename:   C:\Users\GerardML\Documents\Estudio\Prueba Codigo C\RTOS\RTOS.lst

               ROM used:   179 words (2%)
                           Largest free fragment is 2048
               RAM used:   27 (7%) at main() level
                           27 (7%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   035
0003:  NOP
.................... #include <16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  21
0009:  RETLW  00
000A:  RETLW  28
000B:  RETLW  00
000C:  RETLW  2F
000D:  RETLW  00
....................  
.................... #list 
....................  
.................... #use delay(clock=4M) 
.................... #fuses xt, noprotect, nowdt 
.................... #use RTOS(timer=0, minor_cycle=10ms) 
....................  
.................... #use standard_io(b) 
....................  
.................... #byte portb = 0x06 
....................  
.................... #task(rate=500ms, max=10ms) 
.................... void task1(){ 
....................    output_toggle(pin_b0); 
000E:  BSF    03.5
000F:  BCF    06.0
0010:  MOVLW  01
0011:  BCF    03.5
0012:  XORWF  06,F
0013:  MOVLW  0E
0014:  MOVWF  26
0015:  MOVLW  00
0016:  MOVWF  27
0017:  BCF    0A.3
0018:  BCF    0A.4
0019:  GOTO   0A2
001A:  RETURN
.................... } 
....................  
.................... #task(rate=30ms, max=10ms) 
.................... void task2(){ 
....................    output_toggle(pin_b1); 
001B:  BSF    03.5
001C:  BCF    06.1
001D:  MOVLW  02
001E:  BCF    03.5
001F:  XORWF  06,F
0020:  MOVLW  1B
0021:  MOVWF  2D
0022:  MOVLW  00
0023:  MOVWF  2E
0024:  BCF    0A.3
0025:  BCF    0A.4
0026:  GOTO   0A2
0027:  RETURN
.................... } 
....................  
.................... #task(rate=1500ms, max=10ms) 
.................... void task3(){ 
....................    output_toggle(pin_b2); 
0028:  BSF    03.5
0029:  BCF    06.2
002A:  MOVLW  04
002B:  BCF    03.5
002C:  XORWF  06,F
002D:  MOVLW  28
002E:  MOVWF  34
002F:  MOVLW  00
0030:  MOVWF  35
0031:  BCF    0A.3
0032:  BCF    0A.4
0033:  GOTO   0A2
0034:  RETURN
....................    //rtos_terminate( ); 
.................... } 
....................  
.................... void main(){ 
0035:  MOVF   03,W
0036:  ANDLW  1F
0037:  MOVWF  03
0038:  BSF    03.5
0039:  BSF    1F.0
003A:  BSF    1F.1
003B:  BSF    1F.2
003C:  BCF    1F.3
003D:  BCF    03.7
....................    set_tris_b(0x00); 
003E:  MOVLW  00
003F:  MOVWF  06
....................    portb=0xFF; 
0040:  MOVLW  FF
0041:  BCF    03.5
0042:  MOVWF  06
....................    RTOS_run(); 
0043:  CLRF   21
0044:  CLRF   23
0045:  MOVLW  32
0046:  MOVWF  22
0047:  CLRF   25
0048:  MOVLW  01
0049:  MOVWF  24
004A:  MOVLW  0E
004B:  MOVWF  26
004C:  MOVLW  00
004D:  MOVWF  27
004E:  CLRF   28
004F:  CLRF   2A
0050:  MOVLW  03
0051:  MOVWF  29
0052:  CLRF   2C
0053:  CLRF   2B
0054:  MOVLW  1B
0055:  MOVWF  2D
0056:  MOVLW  00
0057:  MOVWF  2E
0058:  CLRF   2F
0059:  CLRF   31
005A:  MOVLW  96
005B:  MOVWF  30
005C:  CLRF   33
005D:  MOVLW  02
005E:  MOVWF  32
005F:  MOVLW  28
0060:  MOVWF  34
0061:  MOVLW  00
0062:  MOVWF  35
0063:  CLRF   20
0064:  BSF    03.5
0065:  MOVF   01,W
0066:  ANDLW  C0
0067:  IORLW  05
0068:  MOVWF  01
0069:  MOVLW  64
006A:  BCF    03.5
006B:  MOVWF  01
006C:  BCF    0B.2
006D:  BCF    03.0
006E:  RLF    20,W
006F:  MOVWF  77
0070:  CALL   004
0071:  MOVWF  79
0072:  MOVLW  01
0073:  ADDWF  77,W
0074:  CALL   004
0075:  MOVWF  7A
0076:  MOVF   79,W
0077:  MOVWF  04
0078:  BCF    03.7
0079:  BTFSC  7A.0
007A:  BSF    03.7
007B:  MOVF   00,W
007C:  MOVWF  79
007D:  INCF   04,F
007E:  MOVF   00,W
007F:  MOVWF  77
0080:  INCF   04,F
0081:  MOVF   00,W
0082:  MOVWF  78
0083:  INCF   04,F
0084:  INCF   00,F
0085:  MOVF   00,W
0086:  MOVWF  7A
0087:  BTFSS  03.2
0088:  GOTO   08C
0089:  INCF   04,F
008A:  INCF   00,F
008B:  DECF   04,F
008C:  INCF   04,F
008D:  MOVF   00,W
008E:  SUBWF  78,W
008F:  BTFSS  03.2
0090:  GOTO   0A4
0091:  MOVF   77,W
0092:  SUBWF  7A,W
0093:  BTFSS  03.2
0094:  GOTO   0A4
0095:  DECF   04,F
0096:  CLRF   00
0097:  INCF   04,F
0098:  CLRF   00
0099:  INCF   04,F
009A:  BTFSC  79.7
009B:  GOTO   0A4
009C:  INCF   04,F
009D:  MOVF   00,W
009E:  MOVWF  0A
009F:  DECF   04,F
00A0:  MOVF   00,W
00A1:  MOVWF  02
00A2:  BCF    03.5
00A3:  BCF    03.6
00A4:  INCF   20,F
00A5:  MOVLW  03
00A6:  SUBWF  20,W
00A7:  BTFSS  03.2
00A8:  GOTO   06D
00A9:  CLRF   20
00AA:  MOVF   01,W
00AB:  BTFSS  0B.2
00AC:  GOTO   0AF
00AD:  BSF    03.5
00AE:  GOTO   069
00AF:  GOTO   0AA
00B0:  MOVLW  FF
00B1:  MOVWF  20
.................... } 
00B2:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
